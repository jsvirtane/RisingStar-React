{"version":3,"sources":["hooks/useField.js","components/DateInput.js","services/ApiCall.js","components/BearTrend.js","services/FilterService.js","services/UnixToDate.js","components/TopVolume.js","components/OptimalDates.js","components/Banner.js","components/ErrorMessage.js","hooks/useToggle.js","App.js","index.js"],"names":["useField","type","useState","value","setValue","onChange","event","target","DateInput","submitDates","startDate","endDate","className","onSubmit","e","for","id","ApiCall","getData","a","startDateAsUnix","Date","getTime","endDateAsUnix","fetch","response","json","then","data","BearTrend","class","bearTrend","previous","lengthOfTrends","i","length","push","Math","max","calculateBearTrend","FilterService","filteredData","getUTCDate","UnixToDate","unix","date","getDate","month","getMonth","year","getFullYear","TopVolume","topVolume","toFixed","findHighestVolume","OptimalDates","min_max","max_diff","j","buyDate","sellDate","Banner","ErrorMessage","isOpen","role","useToggle","setIsOpen","toggle","App","apiData","setApiData","priceData","setPriceData","volumeData","setVolumeData","useEffect","prices","total_volumes","Collapse","Datafetcher","preventDefault","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e92f28f2.chunk.js","sourcesContent":["import { useState } from \"react\"\n\n// Simplifies handling input fields on forms\n// Initialize: const Example = useField('text')\n// Set input field value: value={Example.value}\n// Allow editing input field: onChange={Example.onChange}\n// Get type: Example.type\n\nconst useField = (type) => {\n  const [value, setValue] = useState(\"\")\n\n  const onChange = (event) => {\n    setValue(event.target.value)\n  }\n\n  return {\n    type,\n    value,\n    onChange,\n    setValue\n\n  }\n}\nexport default useField\n","import React from \"react\"\nimport useField from \"../hooks/useField\"\n\nconst DateInput = ({ submitDates }) => {\n  const startDate = useField(\"date\")\n  const endDate = useField(\"date\")\n\n  return (\n    <>\n      <form\n        className=\"mt-2\"\n        onSubmit={(e) => submitDates(e, startDate.value, endDate.value)}\n      >\n        <div className=\"row\">\n          <div className=\"col-md-5\">\n            <label for=\"startDate\">From:</label>\n            <input\n              type=\"date\"\n              id=\"startDate\"\n              className=\"form-control\"\n              value={startDate.value}\n              onChange={startDate.onChange}\n            ></input>\n          </div>\n          <div className=\"col-md-5\">\n            <label for=\"endDate\">To:</label>\n            <input\n              type=\"date\"\n              id=\"endDate\"\n              className=\"form-control\"\n              value={endDate.value}\n              onChange={endDate.onChange}\n            ></input>\n          </div>\n          <div className=\"col-md-2 col-12\">\n            <button type=\"submit\" className=\"btn btn-primary mt-4\">\n              Confirm dates\n            </button>\n          </div>\n        </div>\n      </form>\n    </>\n  )\n}\nexport default DateInput\n","// fetch data from Coin Gecko's API\nconst ApiCall = () => {\n  const getData = async (startDate, endDate) => {\n    // For now like this, later possible to add more coins\n    const coinId = \"bitcoin\"\n\n    // Converting dates to Unix as API requires\n    const startDateAsUnix = new Date(startDate).getTime() / 1000\n    const endDateAsUnix = new Date(endDate).getTime() / 1000 + 3600\n    const response = await fetch(\n      `https://api.coingecko.com/api/v3/coins/${coinId}/market_chart/range?vs_currency=eur&from=${startDateAsUnix}&to=${endDateAsUnix}`\n    )\n    const data = await response.json().then((data) => data)\n    return data\n  }\n  return { getData }\n}\n\nexport default ApiCall\n","import React from \"react\"\n\n// Calculates the longest bear trend between provided date range\nconst BearTrend = ({ data }) => {\n  const calculateBearTrend = () => {\n    let bearTrend = 0\n    let previous = 0\n    let lengthOfTrends = []\n\n    // Comparing days price to yesterdays price\n    for (let i = 0; i < data.length; i++) {\n      // If the price has decreased, add +1 to current trend\n      if (data[i][1] < previous) {\n        bearTrend = bearTrend + 1\n      }\n      // If the price increases, end current trend and add it to array containing trend streaks\n      if (data[i][1] > previous) {\n        lengthOfTrends.push(bearTrend)\n        bearTrend = 0\n      }\n      // Adding the last trend to the array of trend streaks\n      previous = data[i][1]\n    }\n    // Find the longest trend streak from the array of trend streaks\n    lengthOfTrends.push(bearTrend)\n    return Math.max(...lengthOfTrends)\n  }\n\n  // Only return results when data is provided.\n  if (data) {\n    return (\n      <>\n        <div className=\"card text-center h-100 border-dark\">\n          <h3 class=\"card-header\">Bear trend</h3>\n          <p>\n            Longest bear trend between date range was {calculateBearTrend()} day(s).\n          </p>\n        </div>\n      </>\n    )\n  }\n  return null\n}\nexport default BearTrend\n","// Data points are needed only for once a day, so additional data points are filtered.\n\nconst FilterService = (data) => {\n  if (data) {\n    const filteredData = [data[0]]\n    for (let i = 1; i < data.length; i++) {\n      if (\n        // If data point have different day than earlier, it will be added to filtteredData-array\n        new Date(data[i][0]).getUTCDate() !==\n        new Date(data[i - 1][0]).getUTCDate()\n      ) {\n        filteredData.push(data[i])\n      }\n    }\n    return filteredData\n  }\n}\n\nexport default FilterService\n","// Convert Unix to human readable date\n// Parameter: Date as a Unix\nconst UnixToDate = (unix) => {\n    const date = new Date(unix).getDate()\n    const month = new Date(unix).getMonth()\n    const year = new Date(unix).getFullYear()\n\n    // Date.getMonth() returns month between 0-11, so add 1 to make it correct month\n    return `${date}.${month + 1}.${year}`\n}\nexport default UnixToDate","import React from \"react\"\nimport UnixToDate from \"../services/UnixToDate\"\n\n// Find the highest volume during given data range\nconst TopVolume = ({ data }) => {\n  const findHighestVolume = () => {\n    let topVolume = 0\n    let date = ''\n    // Loop trough all day, check if the volume is higher than any day earlier, save it to the variable if it is.\n    for (let i = 0; i < data.length; i++) {\n      if (data[i][1] > topVolume) {\n        topVolume = data[i][1]\n        date = data[i][0]\n      }\n    }\n    return (\n      <div className=\"card text-center h-100 border-dark\">\n        <h3 className=\"card-header\">Top Volume</h3>\n        <p>\n          Highest volume were on <b>{UnixToDate(date)}</b>. Volume were{\" \"}\n          <b>{topVolume.toFixed(2)}</b> euros.\n        </p>\n      </div>\n    )\n  }\n  if (data) {\n      return <>{findHighestVolume()}</>\n  }\n  return null\n}\nexport default TopVolume\n","import UnixToDate from \"../services/UnixToDate\"\n\n// Checks the optimal dates to buy and sell (days when the price difference is biggest during given range).\nconst OptimalDates = ({ data }) => {\n  if (data) {\n    let max_diff = 0\n    let min_max\n    // Going through price from every day and comparing it to all days after that.\n    for (let i = 0; i < data.length; i++) {\n      for (let j = i + 1; j < data.length; j++) {\n        // If the price difference is bigger than any earlier, save the dates and prices.\n        if (data[j][1] - data[i][1] > max_diff) {\n          max_diff = data[j][1] - data[i][1]\n          min_max = {\n            buyDate: data[i][0],\n            sellDate: data[j][0],\n          }\n        }\n      }\n    }\n    // If the price declined everyday during date range, there is no good time to buy.\n    if (!max_diff) {\n      return (\n        <div className=\"card text-center h-100 border-dark\">\n          <h3 class=\"card-header\">Optimal Dates</h3>\n          <p className=\"text-danger\">\n            Do not buy! Price will only decrease during date range\n          </p>\n        </div>\n      )\n    }\n    // Returning the dates and profit made (If bought one Bitcoin). \n    return (\n      <div className=\"card text-center h-100 border-dark\">\n        <h3 class=\"card-header\">Optimal Dates</h3>\n        <p>\n          Buy: {UnixToDate(min_max.buyDate)} <br />\n          Sell: {UnixToDate(min_max.sellDate)}\n          <br />\n          <span className=\"text-success\">\n            Profit made: {max_diff.toFixed(2)}€\n          </span>\n        </p>\n      </div>\n    )\n  }\n  return null\n}\nexport default OptimalDates\n","const Banner = () => {\n  return (\n    <>\n      <h1 className=\"display-2 text-center\">\n        $crooge McDuck's Crypto analyzer\n      </h1>\n    </>\n  )\n}\nexport default Banner\n","const ErrorMessage = ({ isOpen }) => {\n  if (isOpen) {\n    return (\n      <div class=\"alert alert-danger mt-2\" role=\"alert\">\n        Check the dates!\n      </div>\n    )\n  }\n  return null\n}\nexport default ErrorMessage\n","import { useState } from \"react\"\n\n// Toggle elements with ease\n// Initialize: const Example = useToggle()\n// Toggle: Example.toggle()\n// Get state of toggle: Example.isOpen\n\nconst useToggle = () => {\n  const [isOpen, setIsOpen] = useState(false)\n  const toggle = () => setIsOpen(!isOpen)\n\n  return {\n    toggle,\n    isOpen,\n  }\n}\nexport default useToggle\n","import { useState, useEffect } from \"react\"\nimport DateInput from \"./components/DateInput\"\nimport ApiCall from \"./services/ApiCall\"\nimport BearTrend from \"./components/BearTrend\"\nimport FilterService from \"./services/FilterService\"\nimport TopVolume from \"./components/TopVolume\"\nimport OptimalDates from \"./components/OptimalDates\"\nimport Banner from \"./components/Banner\"\nimport ErrorMessage from \"./components/ErrorMessage\"\nimport useToggle from \"./hooks/useToggle\"\n\nconst App = () => {\n  const [apiData, setApiData] = useState([])\n  const [priceData, setPriceData] = useState([])\n  const [volumeData, setVolumeData] = useState([])\n\n  useEffect(() => setPriceData(FilterService(apiData.prices)), [apiData])\n  useEffect(() => setVolumeData(FilterService(apiData.total_volumes)), [apiData])\n\n  const Collapse = useToggle()\n  const Datafetcher = ApiCall()\n\n  const submitDates = (e, startDate, endDate) => {\n    e.preventDefault()\n    if (startDate >= endDate) {\n      if (Collapse.isOpen !== true) {\n        Collapse.toggle()\n      }\n    }\n    if (startDate < endDate) {\n      if (Collapse.isOpen === true) {\n        Collapse.toggle()\n      }\n      Datafetcher.getData(startDate, endDate).then((data) => setApiData(data))\n    }\n  }\n\n  return (\n    <div className=\"bg-light vh-100\">\n      <Banner />\n      <div className=\"container\">\n        <DateInput submitDates={submitDates} />\n        <ErrorMessage isOpen={Collapse.isOpen} />\n        <div className=\"row mt-2\">\n          <div className=\"col-md-4 mt-2\">\n            <BearTrend data={priceData} />\n          </div>\n          <div className=\"col-md-4 mt-2\">\n            <TopVolume data={volumeData} />\n          </div>\n          <div className=\"col-md-4 mt-2\">\n            <OptimalDates data={priceData} />\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css'\n\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}